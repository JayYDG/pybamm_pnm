# -*- coding: utf-8 -*-
"""
Created on Wed Apr 22 10:26:40 2020

@author: Tom
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import InterpolatedUnivariateSpline
plt.close('all')
neg_ocp = np.array([
[0.003916912,	0.901051092],
[0.006841474,	0.715641404],
[0.012510623,	0.563924161],
[0.02353397,	0.418918412],
[0.042611108,	0.294092136],
[0.069179623,	0.236639504],
[0.100479928,	0.206126581],
[0.130497925,	0.199216368],
[0.161145828,	0.175448683],
[0.191786232,	0.148310253],
[0.221774234,	0.127917062],
[0.253127031,	0.12099935],
[0.284487327,	0.117452382],
[0.314520322,	0.117283657],
[0.345880618,	0.113736689],
[0.376581013,	0.113564215],
[0.407273909,	0.110020997],
[0.437966805,	0.106477778],
[0.469312103,	0.096189322],
[0.500642404,	0.079159376],
[0.5313353,	    0.075616158],
[0.562043194,	0.078814428],
[0.593403489,	0.07526746],
[0.624111383,	0.07846573],
[0.654811778,	0.078293256],
[0.686839474,	0.074742539],
[0.716872469,	0.074573814],
[0.748232765,	0.071026846],
[0.778258261,	0.067487377],
[0.808943658,	0.060573414],
[0.839606559,	0.043547218],
[0.852249663,	0.026622257],
[0.864877768,	0.002955807]
])

pos_ocp = np.array([
[0.220677,	4.278846],
[0.248916,	4.211538],
[0.277195,	4.177885],
[0.301963,	4.168269],
[0.330854,	4.153846],
[0.352649,	4.125000],
[0.377973,	4.086538],
[0.400936,	4.048077],
[0.428631,	4.019231],
[0.455145,	3.990385],
[0.481660,	3.961538],
[0.509939,	3.927885],
[0.533504,	3.899038],
[0.557063,	3.865385],
[0.582987,	3.836538],
[0.610676,	3.802885],
[0.639568,	3.788462],
[0.673758,	3.764423],
[0.707358,	3.740385],
[0.735064,	3.721154],
[0.766304,	3.697115],
[0.796364,	3.673077],
[0.827014,	3.649038],
[0.859434,	3.625000],
[0.891854,	3.600962],
[0.920740,	3.581731],
[0.944322,	3.567308],
[0.969679,	3.557692],
[0.986181,	3.543269],
[0.995609,	3.533654],
[0.999694,	3.495192],
[1.000925,	3.038462]
])

neg_dudt = np.array([
[0.00262834,	0.324616004],
[0.054917883,	0.298041658],
[0.10989198,	0.271462755],
[0.163491895,	0.230624725],
[0.215339329,	0.00642804],
[0.270327099,	-0.014038833],
[0.323990824,	-0.026354051],
[0.378639036,	-0.198603029],
[0.433626806,	-0.219069902],
[0.488712569,	-0.195733884],
[0.544117379,	-0.029783808],
[0.595078318,	-0.050243843],
[0.651431154,	-0.060526276],
[0.705103994,	-0.068766807],
[0.758774555,	-0.07802601],
[0.812426885,	-0.095434588],
[0.866079215,	-0.112843166],
])
neg_dudt[:, 1]*= 1e-3
neg_interp = InterpolatedUnivariateSpline(neg_dudt[:, 0], neg_dudt[:, 1])

pos_dudt = np.array([
[0.213962039,	0.00964467],
[0.278174102,	0.038071066],
[0.333187076,	0.00964467],
[0.385567416,	0.02284264],
[0.438080901,	0.013705584],
[0.494249813,	-0.008629442],
[0.546630153,	0.004568528],
[0.600263263,	0.007614213],
[0.652921997,	-0.025888325],
[0.707801826,	-0.031979695],
[0.761440989,	-0.029949239],
[0.8150741,	    -0.026903553],
[0.867472596,	-0.016751269],
[0.920058705,	-0.038071066],
[0.982249389,	-0.070558376]
])
pos_dudt[:, 1]*= 1e-3
pos_interp = InterpolatedUnivariateSpline(pos_dudt[:, 0], pos_dudt[:, 1])

def RKn_fit(x, U0, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9):
    A = [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]
    R = 8.314
    T = 298.15
    F = 96485
    term1 = R*T/F*np.log((1-x)/x)
    term2 = 0
    for k in range(len(A)):
        term2 += (A[k]/F)*((2*x-1)**(k+1) - (2*x*k*(1-x))/(2*x-1)**(1-k))
    return U0 + term1 + term2

def neg_OCP(sto):
    neg_popt = np.array([ 2.79099024e-01,  2.72347515e+04,  3.84107939e+04,  2.82700416e+04,
       -5.08764455e+03,  5.83084069e+04,  2.74900945e+05, -1.58889236e+05,
       -5.48361415e+05,  3.09910938e+05,  5.56788274e+05])
    return RKn_fit(sto, *neg_popt)

def pos_OCP(sto):
    c = [5.88523041,  -16.64427726,   65.89481612, -131.99750794,
        124.80902818,  -44.56278259]
    return c[0] + c[1]*sto + c[2]*sto**2 + c[3]*sto**3 + c[4]*sto**4 + c[5]*sto**5

def neg_dUdT(sto):
    c = [3.25182032e-04, -1.10405547e-03,  2.02525788e-02, -2.02055921e-01,
         7.09962540e-01, -1.13830746e+00,  8.59315741e-01, -2.48497618e-01]
    return c[0] + c[1]*sto + c[2]*sto**2 + c[3]*sto**3 + c[4]*sto**4 + c[5]*sto**5 + c[6]*sto**6 + c[7]*sto**7

def pos_dUdT(sto):
    c = [9.90601449e-06, -4.77219388e-04,  4.51317690e-03, -1.33763466e-02,
         1.55768635e-02, -6.33314715e-03]
    return c[0] + c[1]*sto + c[2]*sto**2 + c[3]*sto**3 + c[4]*sto**4 + c[5]*sto**5

fig, axes = plt.subplots(2, 2, sharex= True, sharey=False, figsize=(10,10))
axes[0][0].plot(neg_ocp[:, 0], neg_ocp[:, 1])
axes[0][1].plot(pos_ocp[:, 0], pos_ocp[:, 1],'r')
axes[1][0].scatter(neg_dudt[:, 0], neg_dudt[:, 1])
axes[1][0].plot(neg_dudt[:, 0], neg_interp(neg_dudt[:, 0]), 'k--')
axes[1][1].scatter(pos_dudt[:, 0], pos_dudt[:, 1], c='r')
#axes[1][1].plot(pos_dudt[:, 0], pos_dUdT(pos_dudt[:, 0]))
axes[1][1].plot(pos_dudt[:, 0], pos_interp(pos_dudt[:, 0]), 'k--')
axes[0][0].text(0.85, 0.95, 'a', transform=axes[0][0].transAxes,
                fontsize=16, va='top')
axes[0][1].text(0.85, 0.95, 'b', transform=axes[0][1].transAxes,
                fontsize=16, va='top')
axes[1][0].text(0.85, 0.95, 'c', transform=axes[1][0].transAxes,
                fontsize=16, va='top')
axes[1][1].text(0.85, 0.95, 'd', transform=axes[1][1].transAxes,
                fontsize=16, va='top')
axes[0][0].set(ylabel='Equilibirum potential of SiC [V]')
axes[0][1].set(ylabel='Equilibirum potential of NMC-811 [V]')
axes[1][0].set(ylabel='Entropy coefficient of SiC [V/K]')
axes[1][1].set(ylabel='Entropy coefficient of NMC-811 [V/K]')
axes[1][0].set(xlabel='Lithiation degree x in SiC')
axes[1][1].set(xlabel='Lithiation degree y in NMC-811')